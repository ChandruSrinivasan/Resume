{"ast":null,"code":"import { Injectable, NgModule, Directive, HostBinding, ElementRef, Input, defineInjectable, inject } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Configuration service for the NgsScrollReveal directives.\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the ngsReveal directives used in the application.\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nclass NgsRevealConfig {\n  constructor() {\n    /**\n     * `options.delay` is the time before reveal animations begin.\n     * By default, delay will be used for all reveal animations,\n     * but `options.useDelay` can be used to change when delay is applied.\n     * However, animations triggered by `options.reset` will never use delay.\n     */\n    this.delay = 0;\n    /**\n     * `options.distance` controls how far elements move when revealed.\n     */\n\n    this.distance = '0px';\n    /**\n     * `options.duration` controls how long animations take to complete.\n     */\n\n    this.duration = 600;\n    /**\n     * `options.easing` controls how animations transition between their start and end values.\n     * Accepts any valid CSS easing, e.g. 'ease', 'ease-in-out', 'linear', etc.\n     */\n\n    this.easing = 'cubic-bezier(0.5, 0, 0, 1)';\n    /**\n     * `options.interval` is the time between each reveal.\n     */\n\n    this.interval = 0;\n    /**\n     * `options.opacity` specifies the opacity they have prior to being revealed.<br/>\n     */\n\n    this.opacity = 0;\n    /**\n     * `options.origin` specifies what direction elements come from when revealed.\n     */\n\n    this.origin = 'bottom';\n    /**\n     * `options.rotate` specifies the rotation elements have prior to being revealed.\n     */\n\n    this.rotate = {\n      x: 0,\n      y: 0,\n      z: 0\n    };\n    /**\n     * `options.scale` specifies the size of elements have prior to being revealed.\n     */\n\n    this.scale = 0.9;\n    /**\n     * When non-resetting reveal animations complete, `ScrollReveal` will remove that elements event listeners,\n     * generated styles and metadata. In some cases (such as asynchronous sequences), you may not want this behavior.\n     */\n\n    this.cleanup = false;\n    /**\n     * `options.desktop` enables/disables animations on desktop browsers.\n     */\n\n    this.desktop = true;\n    /**\n     * `options.mobile` enables/disables animations on mobile browsers.\n     */\n\n    this.mobile = true;\n    /**\n     * `options.reset` enables/disables elements returning to their initialized position when they leave the viewport.\n     * When true elements reveal each time they enter the viewport instead of once.\n     */\n\n    this.reset = false;\n    /**\n     * `options.useDelay` specifies when values assigned to options.delay are used.\n     *\n     * - 'always' — delay for all reveal animations\n     * - 'once'   — delay only the first time reveals occur\n     * - 'onload' - delay only for animations triggered by first load\n     */\n\n    this.useDelay = 'always';\n    /**\n     * `options.viewFactor` specifies what portion of an element must be within the viewport for it to be considered visible.\n     */\n\n    this.viewFactor = 0.2;\n    /**\n     * `options.viewOffset` expands/contracts the active boundaries of the viewport when calculating element visibility.\n     *\n     * Visual Aid: https://scrollrevealjs.org/assets/viewoffset.png\n     */\n\n    this.viewOffset = {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    };\n  }\n\n}\n\nNgsRevealConfig.ɵfac = function NgsRevealConfig_Factory(t) {\n  return new (t || NgsRevealConfig)();\n};\n\nNgsRevealConfig.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: NgsRevealConfig,\n  factory: NgsRevealConfig.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nNgsRevealConfig.ngInjectableDef = defineInjectable({\n  factory: function NgsRevealConfig_Factory() {\n    return new NgsRevealConfig();\n  },\n  token: NgsRevealConfig,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Service to interact with the window object.\n */\n\n\nclass WindowService {\n  /**\n   * @return {?}\n   */\n  get nativeWindow() {\n    return _window();\n  }\n\n}\n\nWindowService.ɵfac = function WindowService_Factory(t) {\n  return new (t || WindowService)();\n};\n\nWindowService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: WindowService,\n  factory: WindowService.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nWindowService.ngInjectableDef = defineInjectable({\n  factory: function WindowService_Factory() {\n    return new WindowService();\n  },\n  token: WindowService,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @return {?}\n */\n\n\nfunction _window() {\n  // Return the global native browser window object\n  return typeof window !== 'undefined' ? window : undefined;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Service to inject in directives to use ScrollReveal JS.\n * It delegates the work to SR, when DOM manipulation is possible (i.e app is not running in a web worker for e.g).\n * If not possible, most methods simply do nothing, as DOM elements are not available anyway.\n */\n\n\nclass NgsRevealService {\n  /**\n   * @param {?} config\n   * @param {?} windowService\n   */\n  constructor(config, windowService) {\n    // Observable  sources\n    this.beforeRevealSource = new Subject();\n    this.afterRevealSource = new Subject();\n    this.beforeResetSource = new Subject();\n    this.afterResetSource = new Subject(); // Observable  streams\n\n    this.beforeReveal$ = this.beforeRevealSource.asObservable();\n    this.afterReveal$ = this.afterRevealSource.asObservable();\n    this.beforeReset$ = this.beforeResetSource.asObservable();\n    this.afterReset$ = this.afterResetSource.asObservable();\n    this.window = windowService.nativeWindow;\n    this.init(config);\n  }\n  /**\n   * Initializes Cookie Consent with the provided configuration.\n   * @param {?} config the configuration object\n   * @return {?}\n   */\n\n\n  init(config) {\n    if (this.window) {\n      // universal support\n      this.config = config; // Set callbacks hooks:\n\n      this.config.beforeReveal = el => this.beforeRevealSource.next(el);\n\n      this.config.afterReveal = el => this.afterRevealSource.next(el);\n\n      this.config.beforeReset = el => this.beforeResetSource.next(el);\n\n      this.config.afterReset = el => this.afterResetSource.next(el); // init the scrollReveal library with injected config\n\n\n      this.sr = ScrollReveal(config);\n    }\n  }\n  /**\n   * Gets the current configuration  used by ScrollReveal.\n   * @return {?}\n   */\n\n\n  getConfig() {\n    return this.config;\n  }\n  /**\n   * Method to reveal a single DOM element.\n   * @param {?} elementRef  a reference to the element to reveal\n   * @param {?=} config      (optional) custom configuration to use when revealing this element\n   * @return {?}\n   */\n\n\n  reveal(elementRef, config) {\n    if (this.window && elementRef.nativeElement) {\n      this.sr.reveal(elementRef.nativeElement, config);\n    }\n  }\n  /**\n   * Method to reveal a set of DOM elements.\n   * @param {?} parentElementRef  the parent DOM element encaspulating the child elements to reveal\n   * @param {?} selector          a list of CSS selectors (comma-separated) that identifies child elements to reveal\n   * @param {?=} interval          (optional) interval in milliseconds, to animate child elemnts sequentially\n   * @param {?=} config            (optional) custom configuration to use when revealing this set of elements\n   * @return {?}\n   */\n\n\n  revealSet(parentElementRef, selector, interval, config) {\n    if (this.window && parentElementRef.nativeElement) {\n      const\n      /** @type {?} */\n      options = Object.assign({}, config, {\n        interval: interval\n      });\n      this.sr.reveal(selector, options);\n    }\n  }\n  /**\n   * Method to synchronize and consider newly added child elements (for e.g when child elements were added asynchronously to parent DOM) .\n   * @return {?}\n   */\n\n\n  sync() {\n    if (this.window) {\n      // universal support\n      this.sr.sync();\n    }\n  }\n  /**\n   * Reverses the effects of all `reveal()` calls, removing all generated styles and event listeners, and clears the `ScrollReveal` store.\n   * @return {?}\n   */\n\n\n  destroy() {\n    if (this.window) {\n      this.sr.destroy();\n    }\n  }\n\n}\n\nNgsRevealService.ɵfac = function NgsRevealService_Factory(t) {\n  return new (t || NgsRevealService)(ɵngcc0.ɵɵinject(NgsRevealConfig), ɵngcc0.ɵɵinject(WindowService));\n};\n\nNgsRevealService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: NgsRevealService,\n  factory: NgsRevealService.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\n/** @nocollapse */\nNgsRevealService.ngInjectableDef = defineInjectable({\n  factory: function NgsRevealService_Factory() {\n    return new NgsRevealService(inject(NgsRevealConfig), inject(WindowService));\n  },\n  token: NgsRevealService,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Base directive class shared by the concrete ScrollReveal directives.\n * @abstract\n */\n\n\nclass AbstractNgsRevealDirective {\n  /**\n   * @param {?} ngsRevealService\n   */\n  constructor(ngsRevealService) {\n    this.ngsRevealService = ngsRevealService;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  _initConfig(value) {\n    if (value && typeof value === 'string') {\n      this.config = JSON.parse(value);\n    } else if (value && typeof value === 'object') {\n      this.config = value;\n    }\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Directive to add 'ScrollReveal' functionality to a <b>single DOM element</b> in the page.\n */\n\n\nlet NgsRevealDirective = /*#__PURE__*/(() => {\n  class NgsRevealDirective extends AbstractNgsRevealDirective {\n    /**\n     * @param {?} elementRef\n     * @param {?} ngsRevealService\n     */\n    constructor(elementRef, ngsRevealService) {\n      super(ngsRevealService);\n      this.elementRef = elementRef;\n      this.visibility = 'hidden';\n    }\n    /**\n     * Custom configuration to use when revealing this element\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set _config(value) {\n      this._initConfig(value);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      this.ngsRevealService.reveal(this.elementRef, this.config);\n    }\n\n  }\n\n  NgsRevealDirective.ɵfac = function NgsRevealDirective_Factory(t) {\n    return new (t || NgsRevealDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(NgsRevealService));\n  };\n\n  NgsRevealDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NgsRevealDirective,\n    selectors: [[\"\", \"ngsReveal\", \"\"]],\n    hostVars: 2,\n    hostBindings: function NgsRevealDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"visibility\", ctx.visibility);\n      }\n    },\n    inputs: {\n      _config: [\"ngsReveal\", \"_config\"]\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  /** @nocollapse */\n\n  return NgsRevealDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Directive to add 'ScrollReveal' functionality to a <b>set of DOM elements</b> (identify via the `[ngsSelector]` attribute) in the page.\n * This directive is meant to be placed on the <b>parent node</b> that contains the child elements to reveal.\n * You can optionally add the `[ngsInterval]` attribute to reveal items sequentially, following the given interval(in milliseconds).\n * You can optionally add the `[ngsSync]` attribute to reveal new child elements that may have been added in the parent node asynchronously.\n *\n */\n\n\nlet NgsRevealSetDirective = /*#__PURE__*/(() => {\n  class NgsRevealSetDirective extends AbstractNgsRevealDirective {\n    /**\n     * @param {?} elementRef\n     * @param {?} ngsRevealService\n     */\n    constructor(elementRef, ngsRevealService) {\n      super(ngsRevealService);\n      this.elementRef = elementRef;\n    }\n    /**\n     * Custom configuration to use when revealing this set of elements\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set _config(value) {\n      this._initConfig(value);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      if (!this.ngsSelector && console) {\n        const\n        /** @type {?} */\n        item = this.elementRef.nativeElement ? this.elementRef.nativeElement.className : '';\n        console.error(`[ngx-scrollreveal] You must set \"[ngsSelector]\" attribute on item '${item}' when using \"ngsRevealSet\"`);\n        return;\n      }\n\n      this.ngsRevealService.revealSet(this.elementRef, this.ngsSelector, this.ngsInterval, this.config);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    ngOnChanges(changes) {\n      const\n      /** @type {?} */\n      ngsSyncProp = 'ngsSync';\n\n      if (ngsSyncProp in changes && !changes[ngsSyncProp].isFirstChange() && !changes[ngsSyncProp].currentValue()) {\n        this.ngsRevealService.sync();\n      }\n    }\n\n  }\n\n  NgsRevealSetDirective.ɵfac = function NgsRevealSetDirective_Factory(t) {\n    return new (t || NgsRevealSetDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(NgsRevealService));\n  };\n\n  NgsRevealSetDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NgsRevealSetDirective,\n    selectors: [[\"\", \"ngsRevealSet\", \"\"]],\n    inputs: {\n      _config: [\"ngsRevealSet\", \"_config\"],\n      ngsSelector: \"ngsSelector\",\n      ngsInterval: \"ngsInterval\",\n      ngsSync: \"ngsSync\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  /** @nocollapse */\n\n  return NgsRevealSetDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Main module of the library\n */\n\n\nlet NgsRevealModule = /*#__PURE__*/(() => {\n  class NgsRevealModule {}\n\n  NgsRevealModule.ɵfac = function NgsRevealModule_Factory(t) {\n    return new (t || NgsRevealModule)();\n  };\n\n  NgsRevealModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NgsRevealModule\n  });\n  NgsRevealModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return NgsRevealModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgsRevealModule, {\n    declarations: function () {\n      return [NgsRevealDirective, NgsRevealSetDirective];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [NgsRevealDirective, NgsRevealSetDirective];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nexport { WindowService, NgsRevealService, NgsRevealConfig, NgsRevealDirective, NgsRevealSetDirective, NgsRevealModule, AbstractNgsRevealDirective as ɵa }; //# sourceMappingURL=ngx-scrollreveal.js.map","map":null,"metadata":{},"sourceType":"module"}