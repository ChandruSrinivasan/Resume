{"version":3,"file":"ngs-reveal-config.d.ts","sources":["ngs-reveal-config.d.ts"],"names":[],"mappingssourcesContent":["/**\n * Configuration service for the NgsScrollReveal directives.\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the ngsReveal directives used in the application.\n */\nexport declare class NgsRevealConfig {\n    /**\n     * `options.delay` is the time before reveal animations begin.\n     * By default, delay will be used for all reveal animations,\n     * but `options.useDelay` can be used to change when delay is applied.\n     * However, animations triggered by `options.reset` will never use delay.\n     */\n    delay?: number;\n    /**\n     * `options.distance` controls how far elements move when revealed.\n     */\n    distance?: string;\n    /**\n     * `options.duration` controls how long animations take to complete.\n     */\n    duration?: number;\n    /**\n     * `options.easing` controls how animations transition between their start and end values.\n     * Accepts any valid CSS easing, e.g. 'ease', 'ease-in-out', 'linear', etc.\n     */\n    easing?: string;\n    /**\n     * `options.interval` is the time between each reveal.\n     */\n    interval?: number;\n    /**\n     * `options.opacity` specifies the opacity they have prior to being revealed.<br/>\n     */\n    opacity?: number;\n    /**\n     * `options.origin` specifies what direction elements come from when revealed.\n     */\n    origin?: 'bottom' | 'left' | 'top' | 'right';\n    /**\n     * `options.rotate` specifies the rotation elements have prior to being revealed.\n     */\n    rotate?: {\n        x: number;\n        y: number;\n        z: number;\n    };\n    /**\n     * `options.scale` specifies the size of elements have prior to being revealed.\n     */\n    scale?: number;\n    /**\n     * When non-resetting reveal animations complete, `ScrollReveal` will remove that elements event listeners,\n     * generated styles and metadata. In some cases (such as asynchronous sequences), you may not want this behavior.\n     */\n    cleanup?: boolean;\n    /**\n     * `options.container` is used as the viewport, when determining element visibility.\n     * This is the element that ScrollReveal binds event listeners to.\n     */\n    container?: Element | string;\n    /**\n     * `options.desktop` enables/disables animations on desktop browsers.\n     */\n    desktop?: boolean;\n    /**\n     * `options.mobile` enables/disables animations on mobile browsers.\n     */\n    mobile?: boolean;\n    /**\n     * `options.reset` enables/disables elements returning to their initialized position when they leave the viewport.\n     * When true elements reveal each time they enter the viewport instead of once.\n     */\n    reset?: boolean;\n    /**\n     * `options.useDelay` specifies when values assigned to options.delay are used.\n     *\n     * - 'always' — delay for all reveal animations\n     * - 'once'   — delay only the first time reveals occur\n     * - 'onload' - delay only for animations triggered by first load\n     */\n    useDelay?: 'always' | 'once' | 'onload';\n    /**\n     * `options.viewFactor` specifies what portion of an element must be within the viewport for it to be considered visible.\n     */\n    viewFactor?: number;\n    /**\n     * `options.viewOffset` expands/contracts the active boundaries of the viewport when calculating element visibility.\n     *\n     * Visual Aid: https://scrollrevealjs.org/assets/viewoffset.png\n     */\n    viewOffset?: {\n        top: number;\n        right: number;\n        bottom: number;\n        left: number;\n    };\n    /**\n     * `options.beforeReveal` is a function that fires when a reveal is triggered.\n     */\n    beforeReveal?: (el: HTMLElement) => void;\n    /**\n     * `options.afterReveal` is a function that fires upon reveal completion.\n     */\n    afterReveal?: (el: HTMLElement) => void;\n    /**\n     * `options.beforeReset` is a function that fires when a reset is triggered.\n     */\n    beforeReset?: (el: HTMLElement) => void;\n    /**\n     * `options.afterReset` is a function that fires upon reset completion.Callback to call after an element is reset.\n     */\n    afterReset?: (el: HTMLElement) => void;\n}\n"]}