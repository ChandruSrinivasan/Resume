{"version":3,"file":"ngs-reveal.service.d.ts","sources":["ngs-reveal.service.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef } from '@angular/core';\nimport { NgsRevealConfig } from './ngs-reveal-config';\nimport { WindowService } from './window.service';\nimport { Observable } from 'rxjs';\n/**\n * Type that represents the target that can be passed to `ScrollReveal().reveal()`.\n */\nexport declare type NgsRevealTarget = string | HTMLElement | HTMLCollection | Array<any>;\n/**\n * Basic interface to represent `ScrollReveal` object.\n */\nexport interface NgsScrollReveal {\n    /**\n     * Controls whether or not to output help messages to the console when unexpected things occur at runtime.\n     */\n    debug?: boolean;\n    /**\n     * When `ScrollReveal` is instantiated on unsupported or disabled browsers,\n     * a non-operational instance is created with a `noop` property that returns `true`\n     */\n    noop: boolean;\n    /**\n     * Returns the version of `ScrollReveal` currently loaded on the page.\n     */\n    version?: string;\n    /**\n     * When non-resetting reveal animations complete, `ScrollReveal` will remove that elements event listeners, generated styles and metadata.\n     * In some cases (such as asynchronous sequences), you may not want this behavior.\n     * @param target the related element\n     */\n    clean(target: NgsRevealTarget): void;\n    /**\n     * Reverses the effects of all `reveal()` calls, removing all generated styles and event listeners, and clears the `ScrollReveal` store.\n     */\n    destroy(): void;\n    /**\n     * Invokes all previous `reveal()` calls (with the appropriate arguments), to capture any new elements added to the DOM.\n     */\n    sync(): void;\n    /**\n     * Registers the target element(s) with ScrollReveal, generates animation styles,\n     * and attaches event listeners to manage when styles are applied.\n     * @param target element to reveal\n     * @param options optionbs to use to reveal\n     * @param syncing whether or not to sync newly added elements (through an asyn call for e.g) with DOM\n     */\n    reveal(target: NgsRevealTarget, options?: NgsRevealConfig, syncing?: boolean): void;\n    isSupported(): boolean;\n}\n/**\n * Marker interface to indicate that an object (typically `window`) has `scrollreveal` property.\n */\nexport interface NgsHasScrollReveal {\n    scrollReveal: NgsScrollReveal;\n}\n/**\n * Service to inject in directives to use ScrollReveal JS.\n * It delegates the work to SR, when DOM manipulation is possible (i.e app is not running in a web worker for e.g).\n * If not possible, most methods simply do nothing, as DOM elements are not available anyway.\n */\nexport declare class NgsRevealService {\n    private sr;\n    private window;\n    private config;\n    private beforeRevealSource;\n    private afterRevealSource;\n    private beforeResetSource;\n    private afterResetSource;\n    /**\n     * Observable to subscribe to and get notified before an element is revealed.\n     */\n    beforeReveal$: Observable<HTMLElement>;\n    /**\n     * Observable to subscribe to and get notified after an element is revealed.\n     */\n    afterReveal$: Observable<HTMLElement>;\n    /**\n     * Observable to subscribe to and get notified before an element is reset.\n     */\n    beforeReset$: Observable<HTMLElement>;\n    /**\n     * Observable to subscribe to and get notified after an element is reset.\n     */\n    afterReset$: Observable<HTMLElement>;\n    constructor(config: NgsRevealConfig, windowService: WindowService);\n    /**\n     * Initializes Cookie Consent with the provided configuration.\n     * @param config the configuration object\n     */\n    init(config: NgsRevealConfig): void;\n    /**\n   * Gets the current configuration  used by ScrollReveal.\n   */\n    getConfig(): NgsRevealConfig;\n    /**\n     * Method to reveal a single DOM element.\n     * @param elementRef  a reference to the element to reveal\n     * @param config      (optional) custom configuration to use when revealing this element\n     */\n    reveal(elementRef: ElementRef<HTMLElement>, config?: NgsRevealConfig): void;\n    /**\n     * Method to reveal a set of DOM elements.\n     * @param parentElementRef  the parent DOM element encaspulating the child elements to reveal\n     * @param selector          a list of CSS selectors (comma-separated) that identifies child elements to reveal\n     * @param interval          (optional) interval in milliseconds, to animate child elemnts sequentially\n     * @param config            (optional) custom configuration to use when revealing this set of elements\n     */\n    revealSet(parentElementRef: ElementRef<HTMLElement>, selector: string, interval?: number, config?: NgsRevealConfig): void;\n    /**\n     * Method to synchronize and consider newly added child elements (for e.g when child elements were added asynchronously to parent DOM) .\n     */\n    sync(): void;\n    /**\n     * Reverses the effects of all `reveal()` calls, removing all generated styles and event listeners, and clears the `ScrollReveal` store.\n     */\n    destroy(): void;\n}\n"]}